import streamlit as st
from PIL import Image
import io
import zipfile



st.set_page_config(page_title="T·∫°o Thumbnail", layout="centered")

st.title("Add Thumbnails to√†n b·ªô s·∫£n ph·∫©m Shondo")

# Upload banner
banner_file = st.file_uploader("Upload thumbnail", type=["png", "jpg", "jpeg", "webp"])

# Upload nhi·ªÅu ·∫£nh s·∫£n ph·∫©m
product_files = st.file_uploader(
    "Upload s·∫£n ph·∫©m",
    type=["png", "jpg", "jpeg", "webp"],
    accept_multiple_files=True,
)

# T·ªâ l·ªá banner
col1, col2 = st.columns(2)
with col1:
    ratio = st.number_input("T·ªâ l·ªá banner so v·ªõi chi·ªÅu r·ªông ·∫£nh s·∫£n ph·∫©m (%)", value=100, step=10)
with col2:
    margin_top = st.number_input("Kho·∫£ng c√°ch t·ª´ tr√™n (px)", value=0, step=5)

# T√πy ch·ªçn pad
pad_option = st.checkbox("Pad th√†nh ch√≠nh x√°c 1200x1200 (center, n·ªÅn tr·∫Øng)")

# N√∫t x·ª≠ l√Ω
if st.button("Ch·∫°y x·ª≠ l√Ω"):
    if not banner_file or not product_files:
        st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒë·ªß file banner v√† ·∫£nh s·∫£n ph·∫©m.")
    else:
        with st.spinner("‚è≥ ƒêang x·ª≠ l√Ω, vui l√≤ng ch·ªù..."):
            # ƒê·ªçc banner
            banner = Image.open(banner_file).convert("RGBA")

            # Buffer zip ƒë·ªÉ l∆∞u k·∫øt qu·∫£
            result_buffer = io.BytesIO()
            with zipfile.ZipFile(result_buffer, "w") as out_zip:
                for file in product_files:
                    img = Image.open(file).convert("RGBA")

                    # Resize banner theo t·ªâ l·ªá
                    banner_w = int(img.width * ratio / 100)
                    banner_h = int(banner.height * (banner_w / banner.width))
                    banner_resized = banner.resize((banner_w, banner_h), Image.LANCZOS)

                    # D√°n banner l√™n ·∫£nh
                    img.paste(banner_resized, ((img.width - banner_w) // 2, margin_top), banner_resized)

                    # Pad th√†nh 1200x1200 n·∫øu ch·ªçn
                    if pad_option:
                        final_img = Image.new("RGB", (1200, 1200), (255, 255, 255))
                        x = (1200 - img.width) // 2
                        y = (1200 - img.height) // 2
                        final_img.paste(img, (x, y))
                    else:
                        final_img = img.convert("RGB")

                    # L∆∞u v√†o zip
                    img_bytes = io.BytesIO()
                    final_img.save(img_bytes, format="JPEG", quality=95)
                    out_zip.writestr(f"processed_{file.name}", img_bytes.getvalue())

            result_buffer.seek(0)

        st.success("‚úÖ X·ª≠ l√Ω ho√†n t·∫•t!")
        st.download_button(
            "üì¶ T·∫£i file n√©n k·∫øt qu·∫£",
            data=result_buffer,
            file_name="ket_qua.zip",
            mime="application/zip",
        )
